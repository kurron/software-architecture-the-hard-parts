{
  "configuration" : { },
  "description" : "Epic Saga",
  "documentation" : {
    "decisions" : [ {
      "content" : "# 1. Record architecture decisions\n\n## Status\nAccepted\n\n## Context\nWe will record the architectural decisions made on this project.\n\n## Decision\nWe will use Architecture Decision Records, as described by Michael Nygard in this article: [Documenting Architecture Decisions](http://thinkrelevance.com/blog/2011/11/15/documenting-architecture-decisions)\n\n## Consequences\nSee Michael Nygard's article, linked above.\n\n## Compliance\nBeing a learning project, no effort will be made to enforce the use of decision records.\n\n## Notes\n\n",
      "date" : "2024-10-31T14:04:49Z",
      "format" : "Markdown",
      "id" : "1",
      "status" : "Accepted",
      "title" : "Record architecture decisions"
    }, {
      "content" : "# 1. Microservices Architecture\n\n## Status\nAccepted\n\n## Context\nIn order to showcase the Epic Saga pattern, we need to provide atomic database consistency of the system.\n\n## Decision\nWe will use a Microservices architectural style to implement the distributed services. The simplest style to achieve atomic consistency would to use a monolithic style, such as a Layered Monolith, but the idea is to experience the trade-offs when using the saga in a distributed architecture. A Service-Oriented architecture was also considered, due to the sharing of a database, but that didn't provide any benefits and introduced potential unwanted coupling at the persistence level. \n\n## Consequences\nEach distributed service will connect to the same database but will use their own schema, keeping the database namespace nice and tidy. Since each domain is implemented in its own process, the Orchestrator will have to issue compensating transactions when dealing with service failures. Fault handling is the most difficult part of this saga type and should provide an excellent learning experience. \n\n## Compliance\nBeing a learning project, no effort will be made to enforce the use of decision records.\n\n## Notes\n",
      "date" : "2024-10-31T14:04:49Z",
      "format" : "Markdown",
      "id" : "2",
      "status" : "Accepted",
      "title" : "Microservices Architecture"
    }, {
      "content" : "# 1. Use Kotlin For Production Code\n\n## Status\nAccepted\n\n## Context\nModern Java has improved the programmer experience but Kotlin, in our opinion, provides a better one.\n\n## Decision\nWe will use [Kotlin](https://kotlinlang.org/) to develop the production modules. Test will use Java, primarily due to some complexity in getting Cucumber and Kotlin to play nicely together.\n\n## Consequences\nKotlin has many features baked into the language that require extra libraries to accomplish in Java, e.g. Lombok. Fewer dependencies means fewer upgrade headaches in the future.\n\n## Compliance\nBeing a learning project, no effort will be made to enforce the use of decision records.\n\n## Notes\n",
      "date" : "2024-10-31T14:04:49Z",
      "format" : "Markdown",
      "id" : "3",
      "status" : "Accepted",
      "title" : "Use Kotlin For Production Code"
    }, {
      "content" : "# 1. Use Explicit Contexts\n\n## Status\nAccepted\n\n## Context\nMichael Nygard has a very interesting idea that should allow system to evolve over time. From his book [Release It!]():\n\n>Suppose your service receives this fragment of JSON inside a request: `{\"item\": \"029292934\"}`\n>\n>How much do we know about the item? Is that string the item itself? Or is it an item identifier? Maybe the field would be better named “itemID.” Supposing that it is an identifier, our service can’t do very much with it. In fact, only four things are possible:\n>\n>1. Pass it through as a token to other services. (This includes returning it to the same caller in the future.)\n>2. Look it up by calling another service.\n>3. Look it up in our own database.\n>4. Discard it.\n>\n>In the first case, we’re just using the “itemID” as a token. We don’t care about the internal structure. In this case it would be a mistake to convert it from string to numeric. We’d be imposing a restriction that doesn’t add any value and will probably need to be changed—with huge disruption—in the future.\n>\n>In the second and third cases, we’re using the “itemID” as something we can resolve to get more information. But there’s a serious problem here. The bare string shown earlier doesn’t tell us who has the authoritative information. If the answer isn’t in our own database, we need to call another service. Which service?\n>\n>This issue is so pervasive that it does not even look like a problem at first. In order to get item information, your service must already know who to call! That’s an implicit dependency.\n>\n>That implicit dependency limits you to working with just the one service provider. If you need to support items from two different “universes,” it’s going to be very disruptive.\n>\n>Suppose instead the initial fragment of JSON looked like this: `{\"itemID\": \"https://example.com/policies/029292934\"}`\n>\n>This URL still works if we just want to use it as an opaque token to pass forward. From one perspective, it’s still just a Unicode string.\n>\n>This URL also still works if we need to resolve it to get more information. But now our service does not have to bake in knowledge of the solitary authority. We can support more than one of them.\n>\n>By the way, using a full URL also makes integration testing easier. We no longer need “test” versions of the other services. We can supply our own test harnesses and use URLs to those instead of the production authorities.\n>\n>This example is all in the context of interservice communication. But making implicit context into explicit context has big benefits inside services as well. If you’ve worked on a Ruby on Rails system, you might have run into difficulty when trying to use multiple relational databases from a single service. That’s because ActiveRecord uses an implicit database connection. This is convenient when there’s just one database, but it becomes a hindrance when you need more than one.\n>\n>Global state is the most insidious form of implicit context. That include configuration parameters. These will slow you down when you need to go from “one” to “more than one” of a collaboration.\n\n## Decision\nWhen possible, we will use a URI as the primary key for objects. Depending on the system in question, it may not be an easily resolvable location and may have to be deconstructed a bit before getting to something readable. For example: `mongodb:read-only-user@mongodb.example.com:5762/some-dataset?_id=9876` probably won't have an available protocol handler, so one must be written.  \n\n## Consequences\nIf we can use stable names for the authority portion of the URI, we should be able to move services around and still have systems find the data they need. One element we have to be keenly aware of is that changing the scheme portion later will be very difficult, if not impossible. If available, an HTTP or GraphQL URI should be preferred over direct database or coordinates. In practical terms, this means that we still use database generated primary keys but return a URL as the ID of the asset.  For example, document `1234` would be exposed to the caller as `http://alpha.test.example.com/user/1234`. If that URI is ever \"tugged\" on, hyperlinks are provided to other possible operations on the resource.\n\n## Compliance\nBeing a learning project, no effort will be made to enforce the use of decision records.\n\n## Notes\n",
      "date" : "2024-10-31T14:04:49Z",
      "format" : "Markdown",
      "id" : "4",
      "status" : "Accepted",
      "title" : "Use Explicit Contexts"
    }, {
      "content" : "# 1. Use Mark Richards' \"arrow\" Notation\n\n## Status\nAccepted\n\n## Context\nLooking at a static diagram, especially when printed on a black and white printer, it can be difficult to quickly grasp how each component interacts with others. In particular, the use of arrows and lines are often ambiguous and/or misleading, decreasing the understandability of the diagram.\n\n## Decision\n[Mark Richards](https://developertoarchitect.com/lessons/) has a simple set of conventions when it comes to lines and arrows that we will incorporate into our C4 views: [Lesson 94 - Guidelines for Architecture Diagrams](https://developertoarchitect.com/lessons/lesson94.html) and [Lesson 95 - Guidelines for Architecture Diagrams Revisited](https://developertoarchitect.com/lessons/lesson95.html).\n\n## Consequences\nBy taking using a simple convention when it comes to line and arrow use, people should more quickly understand what is being diagrammed with less ambiguity.\n\n## Compliance\nBeing a learning project, no effort will be made to enforce the use of decision records.\n\n## Notes\n",
      "date" : "2024-10-31T14:04:49Z",
      "format" : "Markdown",
      "id" : "5",
      "status" : "Accepted",
      "title" : "Use Mark Richards' \"arrow\" Notation"
    } ],
    "sections" : [ {
      "content" : "== Context\nBuyMore online is an ecommerce site, selling mostly widgets. The workflow is typical of other sites where, after the purchase is fulfilled, an e-mail notification is sent to the customer. It is very important that any service failures during the workflow get reverted as quickly as possible. We don't want an angry customer because we charged her for something that never shipped!\n\nWARNING: figure out how to embed the context diagram",
      "filename" : "01-context.adoc",
      "format" : "AsciiDoc",
      "order" : 1,
      "title" : ""
    }, {
      "content" : "== Functional Overview\n. Highlight and summarize major functions of the software\n. Is it clear what the system actually does?\n. Is it clear which features, functions, use cases, user stories, etc are significant to the architecture and why?\n. Is it clear who the important users are (roles, actors, personas, etc) and how the system caters for their needs?\n. Is it clear that the above has been used to shape and define the architecture?\n. Is it clear what the system does from a process perspective?\n. What are the major processes and flows of information through the system?\n. Feel free to reference existing documentation\n. The goal is to provide an *overview*\n. Sequence diagram when discussing automated business processes is useful\n. Technical and non-technical people, both inside and outside the immediate development team\n",
      "filename" : "02-functional-overview.adoc",
      "format" : "AsciiDoc",
      "order" : 2,
      "title" : ""
    }, {
      "content" : "== Quality Attributes\n. Summarize key quality attributes\n. Performance (e.g. latency and throughput)\n. Scalability (e.g. data and traffic volumes)\n. Availability (e.g. uptime, downtime, scheduled maintenance, 24x7, 99.9%, etc)\n. Security (e.g. authentication, authorization, data confidentiality, etc)\n. Extensibility\n. Auditing\n. Monitoring and management\n. Reliability\n. Failover/disaster recovery targets (e.g. manual vs automatic, how long will it take?)\n. Business continuity\n. Interoperability\n. Legal, compliance and regulatory requirements (e.g. data protection act)\n. I18n and L10n\n. Accessibility\n. Usability\n. Use SMART (specific, measurable, achievable, relevant and timely) attributes\n. Technical people only",
      "filename" : "03-quality-attributes.adoc",
      "format" : "AsciiDoc",
      "order" : 3,
      "title" : ""
    }, {
      "content" : "== Constraints\n. Summarize the constraints your are working in and some of the decisions that have been made for you\n. Time, budget and resources\n. Approved technology lists and technology constraints\n. Target deployment platform\n. Existing systems and integration standards\n. Local standards (e.g. development, coding, etc)\n. Public standards (e.g. HTTP, SOAP, XML, XML Schema, WSDL, etc)\n. Standard protocols\n. Standard message formats\n. Size of software development team\n. Skill profile of the development team\n. Nature of the software being build (et, tactical or strategic)\n. Political constraints\n. Use of internal intellectual property\n. Technical and non-technical people\n\nWe're a small company with a limited development budget but we do expect that system to become increasingly popular. GURPS Online is built using as a loosely coupled monolith, meaning that there is a single code base but it is structured in such a way that parts of it can be moved out into its own system as needed. This keeps the initial development costs down while providing a path in the future for growth.  Our developers are skilled JVM programmers but we don't have the time or budget to create any bespoke frameworks for this solution. For that reason, the system is built using frameworks plucked from the Spring ecosystem. Further, we're using Kotlin running on contemporary JVM releases, giving us further productivity gains.\n",
      "filename" : "04-constraints.adoc",
      "format" : "AsciiDoc",
      "order" : 4,
      "title" : ""
    }, {
      "content" : "== Principles\n. Make it explicit what principles are being followed\n. Supply existing references, if they exist\n. Architectural layering strategy\n. No business logic in views\n. No database access in views\n. Use of interfaces\n. Always use an ORM\n. Dependency injection\n. The Hollywood principle\n. High cohesion, low coupling\n. Follow SOLID\n. DRY\n. Ensure all components are stateless (e.g. to ease scaling)\n. Prefer a rich domain model\n. Prefer an anemic domain model\n. Prefer stored procedures\n. Avoid stored procedures\n. Don't reinvent the wheel\n. Approaches to error handling, logging, etc\n. Buy rather than build\n. Technical people only\n\n=== Package By Feature\nThe desire to more easily extract features into separate services is a priority. Traditional layering strategies, such a Hexagonal Architecture, will not help in this regard. Instead, we use a packaging concept described in https://youtu.be/5OjqD-ow8GE[Modular Monoliths] and https://youtu.be/48C-RsEu0BQ[Creating a Loosely Coupled Monolith]. The main idea is that each capability of the system is partitioned into its own \"slice\" of the code base. We've taken the approach of using Maven modules as the primary partitioning construct. Unfortunately, Kotlin's `internal` does not work in multi-module Maven projects, so we cannot depend on the compiler in preventing cross-feature coupling. At the persistence layer, we use the same physical database host but give each module its own namespace, preventing modules from directly accessing each other's data. Lastly, we use messaging when interacting with modules, decoupling them in space and time. Only the message broker needs to be available for the system to function.",
      "filename" : "05-principles.adoc",
      "format" : "AsciiDoc",
      "order" : 5,
      "title" : ""
    }, {
      "content" : "== Software Architecture\n* Summarize the software architecture\n* What does the \"big picture\" look like?\n* Is there a clear structure?\n* Is it clear how the system works from the \"30,000 foot view\"?\n* Does it show major containers and technology choices?\n* Does it show major components and their interactions?\n* What are the key internal interfaces? (e.g. web service between web and business tiers)\n* Technical people only",
      "filename" : "06-software-architecture.adoc",
      "format" : "AsciiDoc",
      "order" : 6,
      "title" : ""
    }, {
      "content" : "== External Interfaces\n. What are the key external interfaces?\n.. system-to-system\n.. publicly exposed APIs\n.. exported files\n. Has each interface been thought about from a technical perspective?\n.. what is the technical definition of an interface?\n.. if messaging is being used, which queues and topics are components using to communicate?\n.. what format are the messages (e.g. plain text, Avro, JSON)?\n.. are they synchronous or asynchronous?\n.. are asynchronous messaging links guaranteed?\n.. are subscribers durable where necessary?\n.. can messages be received out of order and is this a problem?\n.. are interfaces idempotent?\n.. is the interface always available or do you need the cache data locally?\n.. how is performance/security/etc catered for?\n. Has each interface been thought about from a non-technical perspective?\n.. who has ownership of the interface?\n.. how often does the interface change and how is versioning handled?\n.. are there service-level agreements in place?\n. A paragraph on each interface covering this topics is sufficient\n. Technical people only",
      "filename" : "07-external-interfaces.adoc",
      "format" : "AsciiDoc",
      "order" : 7,
      "title" : ""
    }, {
      "content" : "== Code\n. Describe implementation details for important/complex parts of the system\n. homegrown frameworks\n. WebMVC frameworks\n. approach to security\n. domain model\n. component frameworks\n. configuration mechanisms\n. architectural layering\n. exceptions and logging\n. how patterns and principals are implemented\n. short description of each element using diagrams as necessary\n. Technical people only",
      "filename" : "08-code.adoc",
      "format" : "AsciiDoc",
      "order" : 8,
      "title" : ""
    }, {
      "content" : "== Data\n. Record anything that is important from the data perspective\n. What does the data model look like?\n. Where is data stored?\n. Who owns the data?\n. How much storage space is needed for the data?\n. Are there any requirements for long term archival?\n. Are there any requirements for log files and audit trails?\n. Are flat files being used for storage?\n. short description of each element using diagrams as necessary\n. Technical people only, including Operations",
      "filename" : "09-data.adoc",
      "format" : "AsciiDoc",
      "order" : 9,
      "title" : ""
    }, {
      "content" : "== Infrastructure Architecture\n. Describe the physical/virtual hardware and networks the software will be deployed to.\n. Is there a clear physical architecture?\n. What hardware does this include across all tiers?\n. Does it cater for redundancy, failover and disaster recovery if applicable?\n. Is it clear how the chosen hardware components have been sized and selected?\n. If multiple servers and sites are used, what are the network links between them?\n. Who is responsible for support and maintenance of the infrastructure?\n. Are there central teams to look after common infrastructure?\n. Who owns the resources?\n. Are there sufficient environments for development, testing, acceptance, pre-production, production?\n. Provide an infrastructure/network diagram with a short narrative\n. Technical people only, including Operations",
      "filename" : "10-infrastructure-architecture.adoc",
      "format" : "AsciiDoc",
      "order" : 10,
      "title" : ""
    }, {
      "content" : "== Deployment\n. Describe the mapping between software (containers) and the infrastructure.\n. How and where is the software installed and configured?\n. Is it clear how the software will be deployed across the infrastructure elements described in the Infrastructure Architecture section?\n. What are the options and have they been documented?\n. Is it understood how memory and CPU will be partitioned between the processes running on a single piece of infrastructure?\n. Are any containers/components running in an active-active, active-passive, hot-standby, cold-standby formation?\n. Has the deployment and rollback strategy been defined?\n. What happens in the event of a software or infrastructure failure?\n. Is it clear how data is replicated across sites?\n. Can use tables to show mapping between containers and infrastructure\n. Can use UML deployment diagrams\n. Can use color coding to designate runtime status (primary vs secondary, etc_",
      "filename" : "11-deployment.adoc",
      "format" : "AsciiDoc",
      "order" : 11,
      "title" : ""
    }, {
      "content" : "== Operation and Support\n. Be explicit about to run, monitor and manage the software\n. Is it clear how the software provides the ability for Operations to monitor and manage the system?\n. Has is this achieved across all tiers of the architecture?\n. How can Operations diagnose problems?\n. Where are errors and information logged?\n. Do configuration changes require a restart?\n. Are there any manual housekeeping tasks that need to be performed on a regular basis?\n. Does old data need to be periodically archived?\n. A simple narrative should suffice here\n. Technical people only, including Operations",
      "filename" : "12-operation-and-support.adoc",
      "format" : "AsciiDoc",
      "order" : 12,
      "title" : ""
    }, {
      "content" : "== Development Environment\n. Summarize how new team members set up a development environment\n. Pre-requisite versions of software needed\n. Links to software downloads\n. Links to virtual machines\n. Environment variables\n. Host name entries\n. IDE configuration\n. Build and test instructions\n. Database population scripts\n. Username, passwords and certificates for connecting to services\n. Links to build servers\n. Technical people only, developers specifically",
      "filename" : "13-deveopment-environment.adoc",
      "format" : "AsciiDoc",
      "order" : 13,
      "title" : ""
    }, {
      "content" : "== Decision Log\n. Capture major decisions that have been made\n. Why did you choose technology/framework X over Y and Z?\n. How did you make the selection? PoC? Product evaluation?\n. Did corporate policy or architecture standards force you to select X?\n. Why did you choose the selected architecture?  What other options did you consider?\n. How do you know that the solution satisfies the major non-functional requirements?\n. Short paragraph describing each decision. Include a date of the decision?\n. Technical people only",
      "filename" : "14-decision-log.adoc",
      "format" : "AsciiDoc",
      "order" : 14,
      "title" : ""
    } ]
  },
  "id" : 1,
  "lastModifiedAgent" : "structurizr-ui",
  "lastModifiedDate" : "2024-10-31T14:13:54Z",
  "model" : {
    "people" : [ {
      "description" : "Purchasing customer",
      "id" : "1",
      "location" : "Unspecified",
      "name" : "Penny",
      "properties" : {
        "structurizr.dsl.identifier" : "penny"
      },
      "relationships" : [ {
        "description" : "purchase products",
        "destinationId" : "29",
        "id" : "30",
        "properties" : {
          "structurizr.dsl.identifier" : "c7d679d3-85cd-45ef-9009-1acd5c0d59aa"
        },
        "sourceId" : "1",
        "tags" : "Relationship,sync-one-way",
        "technology" : "JSON over HTTPS"
      }, {
        "description" : "purchase products",
        "destinationId" : "28",
        "id" : "31",
        "linkedRelationshipId" : "30",
        "sourceId" : "1",
        "technology" : "JSON over HTTPS"
      }, {
        "description" : "purchase products",
        "destinationId" : "3",
        "id" : "32",
        "linkedRelationshipId" : "30",
        "sourceId" : "1",
        "technology" : "JSON over HTTPS"
      } ],
      "tags" : "Element,Person"
    } ],
    "softwareSystems" : [ {
      "description" : "Another system",
      "documentation" : { },
      "id" : "2",
      "location" : "Unspecified",
      "name" : "Buy Less",
      "properties" : {
        "structurizr.dsl.identifier" : "f382e878-b45a-4f3c-8369-37f0dfc150d5"
      },
      "tags" : "Element,Software System"
    }, {
      "containers" : [ {
        "components" : [ {
          "description" : "Service API",
          "documentation" : { },
          "id" : "5",
          "name" : "Order Placement API",
          "properties" : {
            "structurizr.dsl.identifier" : "orderplacementapi"
          },
          "relationships" : [ {
            "description" : "order data",
            "destinationId" : "7",
            "id" : "8",
            "properties" : {
              "structurizr.dsl.identifier" : "832fe050-b806-4111-ab24-5dbc9607a9f5"
            },
            "sourceId" : "5",
            "tags" : "Relationship,sync-one-way",
            "technology" : "Spring Data JDBC"
          } ],
          "tags" : "Element,Component",
          "technology" : "Spring HATEOAS"
        }, {
          "description" : "Order state",
          "documentation" : { },
          "id" : "6",
          "name" : "Order Placement Schema",
          "properties" : {
            "structurizr.dsl.identifier" : "orderplacementschema"
          },
          "tags" : "Element,Component",
          "technology" : "PostgreSQL"
        }, {
          "description" : "Persist Service State",
          "documentation" : { },
          "id" : "7",
          "name" : "Order Placement Persistence",
          "properties" : {
            "structurizr.dsl.identifier" : "050087ab-89d5-4a6a-b5a8-e8f28c4d71c2"
          },
          "relationships" : [ {
            "description" : "order data",
            "destinationId" : "6",
            "id" : "9",
            "properties" : {
              "structurizr.dsl.identifier" : "74611c08-3471-4ab0-bbb0-7482739dc0db"
            },
            "sourceId" : "7",
            "tags" : "Relationship,sync-one-way",
            "technology" : "Spring Data JDBC"
          } ],
          "tags" : "Element,Component",
          "technology" : "Spring Data JDBC"
        } ],
        "description" : "Accepts orders",
        "documentation" : { },
        "id" : "4",
        "name" : "Order Placement Service",
        "properties" : {
          "structurizr.dsl.identifier" : "orderplacementservice"
        },
        "tags" : "Element,Container,tag",
        "technology" : "Spring Ecosystem"
      }, {
        "components" : [ {
          "description" : "Service API",
          "documentation" : { },
          "id" : "11",
          "name" : "Payment API",
          "properties" : {
            "structurizr.dsl.identifier" : "paymentapi"
          },
          "relationships" : [ {
            "description" : "payment data",
            "destinationId" : "13",
            "id" : "14",
            "properties" : {
              "structurizr.dsl.identifier" : "773055cf-2d60-41fb-8d26-58b8d6ae1d39"
            },
            "sourceId" : "11",
            "tags" : "Relationship,sync-one-way",
            "technology" : "Spring Data JDBC"
          } ],
          "tags" : "Element,Component",
          "technology" : "Spring HATEOAS"
        }, {
          "description" : "Payment state",
          "documentation" : { },
          "id" : "12",
          "name" : "Payment Schema",
          "properties" : {
            "structurizr.dsl.identifier" : "paymentschema"
          },
          "tags" : "Element,Component",
          "technology" : "PostgreSQL"
        }, {
          "description" : "Persist Service State",
          "documentation" : { },
          "id" : "13",
          "name" : "Payment Persistence",
          "properties" : {
            "structurizr.dsl.identifier" : "1b1c4530-ba89-4c3c-a30e-9818b99073f7"
          },
          "relationships" : [ {
            "description" : "payment data",
            "destinationId" : "12",
            "id" : "15",
            "properties" : {
              "structurizr.dsl.identifier" : "f394656f-1204-4547-b17a-300fbcbe478a"
            },
            "sourceId" : "13",
            "tags" : "Relationship,sync-one-way",
            "technology" : "Spring Data JDBC"
          } ],
          "tags" : "Element,Component",
          "technology" : "Spring Data JDBC"
        } ],
        "description" : "Process payments",
        "documentation" : { },
        "id" : "10",
        "name" : "Payment Service",
        "properties" : {
          "structurizr.dsl.identifier" : "paymentservice"
        },
        "tags" : "Element,Container,tag",
        "technology" : "Spring Ecosystem"
      }, {
        "components" : [ {
          "description" : "Service API",
          "documentation" : { },
          "id" : "17",
          "name" : "Fulfillment API",
          "properties" : {
            "structurizr.dsl.identifier" : "fulfillmentapi"
          },
          "relationships" : [ {
            "description" : "fulfillment data",
            "destinationId" : "19",
            "id" : "20",
            "properties" : {
              "structurizr.dsl.identifier" : "97eec91f-4eb9-4ca5-83d2-985d2ee2b396"
            },
            "sourceId" : "17",
            "tags" : "Relationship,sync-one-way",
            "technology" : "Spring Data JDBC"
          } ],
          "tags" : "Element,Component",
          "technology" : "Spring HATEOAS"
        }, {
          "description" : "Fulfillment state",
          "documentation" : { },
          "id" : "18",
          "name" : "Fulfillment Schema",
          "properties" : {
            "structurizr.dsl.identifier" : "fulfillmentschema"
          },
          "tags" : "Element,Component",
          "technology" : "PostgreSQL"
        }, {
          "description" : "Persist Service State",
          "documentation" : { },
          "id" : "19",
          "name" : "Fulfillment Persistence",
          "properties" : {
            "structurizr.dsl.identifier" : "e2db4d3d-5912-493c-b298-d6c7bc39d212"
          },
          "relationships" : [ {
            "description" : "fulfillment data",
            "destinationId" : "18",
            "id" : "21",
            "properties" : {
              "structurizr.dsl.identifier" : "399acff0-1f6f-426b-9a5d-9938be30820e"
            },
            "sourceId" : "19",
            "tags" : "Relationship,sync-one-way",
            "technology" : "Spring Data JDBC"
          } ],
          "tags" : "Element,Component",
          "technology" : "Spring Data JDBC"
        } ],
        "description" : "Ships orders",
        "documentation" : { },
        "id" : "16",
        "name" : "Fulfillment Service",
        "properties" : {
          "structurizr.dsl.identifier" : "fulfillmentservice"
        },
        "tags" : "Element,Container,tag",
        "technology" : "Spring Ecosystem"
      }, {
        "components" : [ {
          "description" : "Service API",
          "documentation" : { },
          "id" : "23",
          "name" : "E-Mail API",
          "properties" : {
            "structurizr.dsl.identifier" : "emailapi"
          },
          "relationships" : [ {
            "description" : "e-mail data",
            "destinationId" : "25",
            "id" : "26",
            "properties" : {
              "structurizr.dsl.identifier" : "944819dd-3678-4cf3-810d-a519679964b1"
            },
            "sourceId" : "23",
            "tags" : "Relationship,sync-one-way",
            "technology" : "Spring Data JDBC"
          } ],
          "tags" : "Element,Component",
          "technology" : "Spring HATEOAS"
        }, {
          "description" : "E-mail state",
          "documentation" : { },
          "id" : "24",
          "name" : "E-mail Schema",
          "properties" : {
            "structurizr.dsl.identifier" : "emailschema"
          },
          "tags" : "Element,Component",
          "technology" : "PostgreSQL"
        }, {
          "description" : "Persist Service State",
          "documentation" : { },
          "id" : "25",
          "name" : "E-Mail Persistence",
          "properties" : {
            "structurizr.dsl.identifier" : "29be5374-a4ac-4a6a-8170-18006e912d5d"
          },
          "relationships" : [ {
            "description" : "e-mail data",
            "destinationId" : "24",
            "id" : "27",
            "properties" : {
              "structurizr.dsl.identifier" : "792447a1-19cb-45df-ac46-d3c552ade65b"
            },
            "sourceId" : "25",
            "tags" : "Relationship,sync-one-way",
            "technology" : "Spring Data JDBC"
          } ],
          "tags" : "Element,Component",
          "technology" : "Spring Data JDBC"
        } ],
        "description" : "E-mail customers",
        "documentation" : { },
        "id" : "22",
        "name" : "E-mail Service",
        "properties" : {
          "structurizr.dsl.identifier" : "emailservice"
        },
        "tags" : "Element,Container,tag",
        "technology" : "Spring Ecosystem"
      }, {
        "components" : [ {
          "description" : "Service API",
          "documentation" : { },
          "id" : "29",
          "name" : "Orchestrator API",
          "properties" : {
            "structurizr.dsl.identifier" : "orchestratorapi"
          },
          "relationships" : [ {
            "description" : "execute workflow",
            "destinationId" : "33",
            "id" : "34",
            "properties" : {
              "structurizr.dsl.identifier" : "3208c541-f24a-4934-b8b6-5b2bb1f8031f"
            },
            "sourceId" : "29",
            "tags" : "Relationship,sync-one-way",
            "technology" : "JSON over HTTPS"
          }, {
            "description" : "execute workflow",
            "destinationId" : "52",
            "id" : "53",
            "properties" : {
              "structurizr.dsl.identifier" : "c9512f8f-6c8c-4362-82bd-f4430be82a17"
            },
            "sourceId" : "29",
            "tags" : "Relationship,sync-one-way",
            "technology" : "JSON over HTTPS"
          } ],
          "tags" : "Element,Component",
          "technology" : "Spring HATEOAS"
        }, {
          "description" : "Service Clients",
          "documentation" : { },
          "id" : "33",
          "name" : "Service Gateway",
          "properties" : {
            "structurizr.dsl.identifier" : "servicegateway"
          },
          "relationships" : [ {
            "description" : "accept the order",
            "destinationId" : "5",
            "id" : "35",
            "properties" : {
              "structurizr.dsl.identifier" : "40ca6545-aace-41ca-a989-bd8e5fbfc417"
            },
            "sourceId" : "33",
            "tags" : "Relationship,sync-one-way",
            "technology" : "JSON over HTTPS"
          }, {
            "description" : "accept the order",
            "destinationId" : "4",
            "id" : "36",
            "linkedRelationshipId" : "35",
            "sourceId" : "33",
            "technology" : "JSON over HTTPS"
          }, {
            "description" : "process the payment",
            "destinationId" : "11",
            "id" : "39",
            "properties" : {
              "structurizr.dsl.identifier" : "3d914fb9-947e-4e05-bc48-76cf69103ae5"
            },
            "sourceId" : "33",
            "tags" : "Relationship,sync-one-way",
            "technology" : "JSON over HTTPS"
          }, {
            "description" : "process the payment",
            "destinationId" : "10",
            "id" : "40",
            "linkedRelationshipId" : "39",
            "sourceId" : "33",
            "technology" : "JSON over HTTPS"
          }, {
            "description" : "ship the order",
            "destinationId" : "17",
            "id" : "43",
            "properties" : {
              "structurizr.dsl.identifier" : "46aa6c3d-3f37-4b95-9e20-2492bb906c88"
            },
            "sourceId" : "33",
            "tags" : "Relationship,sync-one-way",
            "technology" : "JSON over HTTPS"
          }, {
            "description" : "ship the order",
            "destinationId" : "16",
            "id" : "44",
            "linkedRelationshipId" : "43",
            "sourceId" : "33",
            "technology" : "JSON over HTTPS"
          }, {
            "description" : "send the order status",
            "destinationId" : "23",
            "id" : "47",
            "properties" : {
              "structurizr.dsl.identifier" : "f1dfe66c-cb08-4b8c-9253-108c11fddf99"
            },
            "sourceId" : "33",
            "tags" : "Relationship,sync-one-way",
            "technology" : "JSON over HTTPS"
          }, {
            "description" : "send the order status",
            "destinationId" : "22",
            "id" : "48",
            "linkedRelationshipId" : "47",
            "sourceId" : "33",
            "technology" : "JSON over HTTPS"
          } ],
          "tags" : "Element,Component",
          "technology" : "Spring HATEOAS"
        }, {
          "description" : "Orchestration state",
          "documentation" : { },
          "id" : "51",
          "name" : "Orchestration Schema",
          "properties" : {
            "structurizr.dsl.identifier" : "orchestrationschema"
          },
          "tags" : "Element,Component",
          "technology" : "PostgreSQL"
        }, {
          "description" : "Persist Service State",
          "documentation" : { },
          "id" : "52",
          "name" : "Orchestrator Persistence",
          "properties" : {
            "structurizr.dsl.identifier" : "4656ee7a-5638-4941-9014-def374518518"
          },
          "relationships" : [ {
            "description" : "orchestration data",
            "destinationId" : "51",
            "id" : "54",
            "properties" : {
              "structurizr.dsl.identifier" : "33b0df06-5992-42a0-b55a-1ef557bbfa1a"
            },
            "sourceId" : "52",
            "tags" : "Relationship,sync-one-way",
            "technology" : "Spring Data JDBC"
          } ],
          "tags" : "Element,Component",
          "technology" : "Spring Data JDBC"
        } ],
        "description" : "Coordinates the workflow, maintains atomic consistency",
        "documentation" : { },
        "id" : "28",
        "name" : "Orchestrator",
        "properties" : {
          "structurizr.dsl.identifier" : "orchestrator"
        },
        "relationships" : [ {
          "description" : "accept the order",
          "destinationId" : "5",
          "id" : "37",
          "linkedRelationshipId" : "35",
          "sourceId" : "28",
          "technology" : "JSON over HTTPS"
        }, {
          "description" : "accept the order",
          "destinationId" : "4",
          "id" : "38",
          "linkedRelationshipId" : "35",
          "sourceId" : "28",
          "technology" : "JSON over HTTPS"
        }, {
          "description" : "process the payment",
          "destinationId" : "11",
          "id" : "41",
          "linkedRelationshipId" : "39",
          "sourceId" : "28",
          "technology" : "JSON over HTTPS"
        }, {
          "description" : "process the payment",
          "destinationId" : "10",
          "id" : "42",
          "linkedRelationshipId" : "39",
          "sourceId" : "28",
          "technology" : "JSON over HTTPS"
        }, {
          "description" : "ship the order",
          "destinationId" : "17",
          "id" : "45",
          "linkedRelationshipId" : "43",
          "sourceId" : "28",
          "technology" : "JSON over HTTPS"
        }, {
          "description" : "ship the order",
          "destinationId" : "16",
          "id" : "46",
          "linkedRelationshipId" : "43",
          "sourceId" : "28",
          "technology" : "JSON over HTTPS"
        }, {
          "description" : "send the order status",
          "destinationId" : "23",
          "id" : "49",
          "linkedRelationshipId" : "47",
          "sourceId" : "28",
          "technology" : "JSON over HTTPS"
        }, {
          "description" : "send the order status",
          "destinationId" : "22",
          "id" : "50",
          "linkedRelationshipId" : "47",
          "sourceId" : "28",
          "technology" : "JSON over HTTPS"
        } ],
        "tags" : "Element,Container,tag",
        "technology" : "Spring Ecosystem"
      } ],
      "description" : "Online Buy More storefront",
      "documentation" : { },
      "id" : "3",
      "location" : "Unspecified",
      "name" : "Buy More",
      "properties" : {
        "structurizr.dsl.identifier" : "buymore"
      },
      "tags" : "Element,Software System"
    } ]
  },
  "name" : "Software Architecture: The Hard Parts (Epic Saga)",
  "properties" : {
    "structurizr.dsl" : ""
  },
  "views" : {
    "componentViews" : [ {
      "automaticLayout" : {
        "applied" : true,
        "edgeSeparation" : 0,
        "implementation" : "Graphviz",
        "nodeSeparation" : 300,
        "rankDirection" : "TopBottom",
        "rankSeparation" : 300,
        "vertices" : false
      },
      "containerId" : "22",
      "dimensions" : {
        "height" : 2591,
        "width" : 890
      },
      "elements" : [ {
        "id" : "23",
        "x" : 220,
        "y" : 800
      }, {
        "id" : "24",
        "x" : 220,
        "y" : 2000
      }, {
        "id" : "25",
        "x" : 220,
        "y" : 1400
      }, {
        "id" : "28",
        "x" : 220,
        "y" : 200
      } ],
      "externalContainerBoundariesVisible" : false,
      "generatedKey" : true,
      "key" : "Component-001",
      "order" : 5,
      "relationships" : [ {
        "id" : "26"
      }, {
        "id" : "27"
      }, {
        "id" : "49"
      } ]
    }, {
      "automaticLayout" : {
        "applied" : true,
        "edgeSeparation" : 0,
        "implementation" : "Graphviz",
        "nodeSeparation" : 300,
        "rankDirection" : "TopBottom",
        "rankSeparation" : 300,
        "vertices" : false
      },
      "containerId" : "16",
      "dimensions" : {
        "height" : 2591,
        "width" : 907
      },
      "elements" : [ {
        "id" : "17",
        "x" : 228,
        "y" : 800
      }, {
        "id" : "18",
        "x" : 228,
        "y" : 2000
      }, {
        "id" : "19",
        "x" : 228,
        "y" : 1400
      }, {
        "id" : "28",
        "x" : 228,
        "y" : 200
      } ],
      "externalContainerBoundariesVisible" : false,
      "generatedKey" : true,
      "key" : "Component-002",
      "order" : 6,
      "relationships" : [ {
        "id" : "20"
      }, {
        "id" : "21"
      }, {
        "id" : "45"
      } ]
    }, {
      "automaticLayout" : {
        "applied" : true,
        "edgeSeparation" : 0,
        "implementation" : "Graphviz",
        "nodeSeparation" : 300,
        "rankDirection" : "TopBottom",
        "rankSeparation" : 300,
        "vertices" : false
      },
      "containerId" : "28",
      "dimensions" : {
        "height" : 2591,
        "width" : 4528
      },
      "elements" : [ {
        "id" : "1",
        "x" : 595,
        "y" : 200
      }, {
        "id" : "4",
        "x" : 1628,
        "y" : 2000
      }, {
        "id" : "10",
        "x" : 2378,
        "y" : 2000
      }, {
        "id" : "16",
        "x" : 3128,
        "y" : 2000
      }, {
        "id" : "22",
        "x" : 3878,
        "y" : 2000
      }, {
        "id" : "29",
        "x" : 595,
        "y" : 800
      }, {
        "id" : "33",
        "x" : 970,
        "y" : 1400
      }, {
        "id" : "51",
        "x" : 220,
        "y" : 2000
      }, {
        "id" : "52",
        "x" : 220,
        "y" : 1400
      } ],
      "externalContainerBoundariesVisible" : false,
      "generatedKey" : true,
      "key" : "Component-003",
      "order" : 7,
      "relationships" : [ {
        "id" : "30"
      }, {
        "id" : "34"
      }, {
        "id" : "36"
      }, {
        "id" : "40"
      }, {
        "id" : "44",
        "vertices" : [ {
          "x" : 2978,
          "y" : 2000
        } ]
      }, {
        "id" : "48",
        "vertices" : [ {
          "x" : 3728,
          "y" : 2000
        } ]
      }, {
        "id" : "53"
      }, {
        "id" : "54"
      } ]
    }, {
      "automaticLayout" : {
        "applied" : true,
        "edgeSeparation" : 0,
        "implementation" : "Graphviz",
        "nodeSeparation" : 300,
        "rankDirection" : "TopBottom",
        "rankSeparation" : 300,
        "vertices" : false
      },
      "containerId" : "4",
      "dimensions" : {
        "height" : 2591,
        "width" : 994
      },
      "elements" : [ {
        "id" : "5",
        "x" : 272,
        "y" : 800
      }, {
        "id" : "6",
        "x" : 272,
        "y" : 2000
      }, {
        "id" : "7",
        "x" : 272,
        "y" : 1400
      }, {
        "id" : "28",
        "x" : 272,
        "y" : 200
      } ],
      "externalContainerBoundariesVisible" : false,
      "generatedKey" : true,
      "key" : "Component-004",
      "order" : 8,
      "relationships" : [ {
        "id" : "37"
      }, {
        "id" : "8"
      }, {
        "id" : "9"
      } ]
    }, {
      "automaticLayout" : {
        "applied" : true,
        "edgeSeparation" : 0,
        "implementation" : "Graphviz",
        "nodeSeparation" : 300,
        "rankDirection" : "TopBottom",
        "rankSeparation" : 300,
        "vertices" : false
      },
      "containerId" : "10",
      "dimensions" : {
        "height" : 2591,
        "width" : 890
      },
      "elements" : [ {
        "id" : "11",
        "x" : 220,
        "y" : 800
      }, {
        "id" : "12",
        "x" : 220,
        "y" : 2000
      }, {
        "id" : "13",
        "x" : 220,
        "y" : 1400
      }, {
        "id" : "28",
        "x" : 220,
        "y" : 200
      } ],
      "externalContainerBoundariesVisible" : false,
      "generatedKey" : true,
      "key" : "Component-005",
      "order" : 9,
      "relationships" : [ {
        "id" : "14"
      }, {
        "id" : "15"
      }, {
        "id" : "41"
      } ]
    } ],
    "configuration" : {
      "branding" : { },
      "lastSavedView" : "Component-003",
      "metadataSymbols" : "SquareBrackets",
      "styles" : {
        "elements" : [ {
          "background" : "#e8a87c",
          "shape" : "Cylinder",
          "tag" : "MessageBroker"
        }, {
          "background" : "#e27d60",
          "shape" : "Cylinder",
          "tag" : "DataStore"
        }, {
          "shape" : "Robot",
          "tag" : "Cron"
        }, {
          "background" : "#dac292",
          "shape" : "Folder",
          "tag" : "FileStore"
        }, {
          "background" : "#c38d9e",
          "shape" : "Pipe",
          "tag" : "Channel"
        }, {
          "background" : "#41b3a3",
          "shape" : "Ellipse",
          "tag" : "Channel Adapter"
        }, {
          "shape" : "Hexagon",
          "tag" : "Microservice"
        }, {
          "shape" : "Box",
          "tag" : "CommandLine"
        }, {
          "shape" : "WebBrowser",
          "tag" : "WebUI"
        } ],
        "relationships" : [ {
          "color" : "#242582",
          "style" : "Dotted",
          "tag" : "async-one-way",
          "thickness" : 2
        }, {
          "color" : "#0000ff",
          "style" : "Solid",
          "tag" : "sync-one-way",
          "thickness" : 2
        }, {
          "color" : "#553d67",
          "style" : "Solid",
          "tag" : "sync-two-way",
          "thickness" : 2
        }, {
          "color" : "#f64c72",
          "style" : "Dotted",
          "tag" : "json-over-mongodb-wire-protocol",
          "thickness" : 2
        }, {
          "color" : "#f64c72",
          "style" : "Dotted",
          "tag" : "jdbc-driver",
          "thickness" : 2
        } ]
      },
      "terminology" : { },
      "themes" : [ "https://static.structurizr.com/themes/default/theme.json" ]
    },
    "containerViews" : [ {
      "automaticLayout" : {
        "applied" : true,
        "edgeSeparation" : 0,
        "implementation" : "Graphviz",
        "nodeSeparation" : 300,
        "rankDirection" : "TopBottom",
        "rankSeparation" : 300,
        "vertices" : false
      },
      "dimensions" : {
        "height" : 1991,
        "width" : 3140
      },
      "elements" : [ {
        "id" : "1",
        "x" : 1345,
        "y" : 199
      }, {
        "id" : "4",
        "x" : 2470,
        "y" : 1399
      }, {
        "id" : "10",
        "x" : 220,
        "y" : 1399
      }, {
        "id" : "16",
        "x" : 970,
        "y" : 1399
      }, {
        "id" : "22",
        "x" : 1720,
        "y" : 1399
      }, {
        "id" : "28",
        "x" : 1345,
        "y" : 799
      } ],
      "externalSoftwareSystemBoundariesVisible" : false,
      "generatedKey" : true,
      "key" : "Container-001",
      "order" : 4,
      "relationships" : [ {
        "id" : "31"
      }, {
        "id" : "38"
      }, {
        "id" : "42"
      }, {
        "id" : "46"
      }, {
        "id" : "50"
      } ],
      "softwareSystemId" : "3"
    } ],
    "systemContextViews" : [ {
      "automaticLayout" : {
        "applied" : false,
        "edgeSeparation" : 0,
        "implementation" : "Graphviz",
        "nodeSeparation" : 300,
        "rankDirection" : "TopBottom",
        "rankSeparation" : 300,
        "vertices" : false
      },
      "elements" : [ {
        "id" : "2",
        "x" : 0,
        "y" : 0
      } ],
      "enterpriseBoundaryVisible" : true,
      "generatedKey" : true,
      "key" : "SystemContext-001",
      "order" : 2,
      "softwareSystemId" : "2"
    }, {
      "automaticLayout" : {
        "applied" : false,
        "edgeSeparation" : 0,
        "implementation" : "Graphviz",
        "nodeSeparation" : 300,
        "rankDirection" : "TopBottom",
        "rankSeparation" : 300,
        "vertices" : false
      },
      "elements" : [ {
        "id" : "1",
        "x" : 0,
        "y" : 0
      }, {
        "id" : "3",
        "x" : 0,
        "y" : 0
      } ],
      "enterpriseBoundaryVisible" : true,
      "generatedKey" : true,
      "key" : "SystemContext-002",
      "order" : 3,
      "relationships" : [ {
        "id" : "32"
      } ],
      "softwareSystemId" : "3"
    } ],
    "systemLandscapeViews" : [ {
      "automaticLayout" : {
        "applied" : false,
        "edgeSeparation" : 0,
        "implementation" : "Graphviz",
        "nodeSeparation" : 300,
        "rankDirection" : "TopBottom",
        "rankSeparation" : 300,
        "vertices" : false
      },
      "elements" : [ {
        "id" : "1",
        "x" : 0,
        "y" : 0
      }, {
        "id" : "2",
        "x" : 0,
        "y" : 0
      }, {
        "id" : "3",
        "x" : 0,
        "y" : 0
      } ],
      "enterpriseBoundaryVisible" : true,
      "generatedKey" : true,
      "key" : "SystemLandscape-001",
      "order" : 1,
      "relationships" : [ {
        "id" : "32"
      } ]
    } ]
  }
}